{"version":3,"sources":["lib/Pass.js","lib/MaskPass.js","lib/ShaderPass.js","lib/shaders/CopyShader.js","lib/EffectComposer.js","lib/RenderPass.js","lib/shaders/DigitalGlitch.js","lib/GlitchPass.js","App.js","serviceWorker.js","index.js"],"names":["Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","console","error","MaskPass","scene","camera","call","inverse","create","constructor","writeValue","clearValue","context","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass","ShaderPass","shader","textureID","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","vertexShader","fragmentShader","OrthographicCamera","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","value","texture","CopyShader","tDiffuse","opacity","join","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getDrawingBufferSize","Vector2","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","_previousFrameTime","Date","now","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","i","currentRenderTarget","getRenderTarget","il","length","stencilFunc","NOTEQUAL","reset","dispose","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","DigitalGlitch","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","GlitchPass","dt_size","generateHeightmap","factor","Math","max","random","_Math","randFloat","PI","data_arr","Float32Array","val","DataTexture","RGBFormat","FloatType","needsUpdate","applySpring","applyThree","Background","viewport","useThree","scale","attach","args","meshBasicMaterial","depthTest","Text","children","position","fontSize","viewportWidth","viewportHeight","canvas","useMemo","document","createElement","getContext","font","textAlign","textBaseline","fillStyle","fillText","sprite","spriteMaterial","transparent","image","premultiplyAlpha","onUpdate","s","Image","url","redirect","props","THREE","load","mesh","useRef","ref","onClick","window","location","meshLambertMaterial","object","Effects","React","memo","gl","composer","useEffect","current","useFrame","attachArray","glitchPass","Stars","group","theta","r","sin","degToRad","cos","rotation","set","Array","fill","map","geo","mat","coords","p1","p2","p3","key","geometry","spotLight","intensity","className","App","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mTAAIA,EAAO,WAEPC,KAAKC,SAAU,EAGfD,KAAKE,WAAY,EAGjBF,KAAKG,OAAQ,EAGbH,KAAKI,gBAAiB,GAGxBC,OAAOC,OAAOP,EAAKQ,UAAW,CAC5BC,QAAS,SAASC,EAAOC,KAEzBC,OAAQ,SAASC,EAAUC,EAAaC,EAAYC,EAAWC,GAC7DC,QAAQC,MAAM,iECbpB,IAAIC,EAAW,SAASC,EAAOC,GAC7BtB,EAAKuB,KAAKtB,MAEVA,KAAKoB,MAAQA,EACbpB,KAAKqB,OAASA,EAEdrB,KAAKG,OAAQ,EACbH,KAAKE,WAAY,EAEjBF,KAAKuB,SAAU,GAGjBJ,EAASZ,UAAYF,OAAOC,OAAOD,OAAOmB,OAAOzB,EAAKQ,WAAY,CAChEkB,YAAaN,EAEbR,OAAQ,SAASC,EAAUC,EAAaC,EAAYC,EAAWC,GAC7D,IAeIU,EAAYC,EAfZC,EAAUhB,EAASgB,QACnBC,EAAQjB,EAASiB,MAIrBA,EAAMC,QAAQC,MAAMC,SAAQ,GAC5BH,EAAMC,QAAQG,MAAMD,SAAQ,GAI5BH,EAAMC,QAAQC,MAAMG,WAAU,GAC9BL,EAAMC,QAAQG,MAAMC,WAAU,GAM1BlC,KAAKuB,SACPG,EAAa,EACbC,EAAa,IAEbD,EAAa,EACbC,EAAa,GAGfE,EAAMC,QAAQK,QAAQC,SAAQ,GAC9BP,EAAMC,QAAQK,QAAQE,MAAMT,EAAQU,QAASV,EAAQU,QAASV,EAAQU,SACtET,EAAMC,QAAQK,QAAQI,QAAQX,EAAQY,OAAQd,EAAY,YAC1DG,EAAMC,QAAQK,QAAQM,SAASd,GAI/Bf,EAAS8B,gBAAgB5B,GACrBd,KAAKG,OAAOS,EAAST,QACzBS,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,QAEjCT,EAAS8B,gBAAgB7B,GACrBb,KAAKG,OAAOS,EAAST,QACzBS,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,QAIjCQ,EAAMC,QAAQC,MAAMG,WAAU,GAC9BL,EAAMC,QAAQG,MAAMC,WAAU,GAI9BL,EAAMC,QAAQK,QAAQI,QAAQX,EAAQe,MAAO,EAAG,YAChDd,EAAMC,QAAQK,QAAQE,MAAMT,EAAQgB,KAAMhB,EAAQgB,KAAMhB,EAAQgB,SAIpE,IAAIC,EAAgB,WAClB9C,EAAKuB,KAAKtB,MAEVA,KAAKE,WAAY,GAGnB2C,EAActC,UAAYF,OAAOmB,OAAOzB,EAAKQ,WAE7CF,OAAOC,OAAOuC,EAActC,UAAW,CACrCI,OAAQ,SAASC,EAAUC,EAAaC,EAAYC,EAAWC,GAC7DJ,EAASiB,MAAMC,QAAQK,QAAQC,SAAQ,MC7E3C,IAAIU,EAAa,SAASC,EAAQC,GAChCjD,EAAKuB,KAAKtB,MAEVA,KAAKgD,eAA0BC,IAAdD,EAA0BA,EAAY,WAEnDD,aAAkBG,KACpBlD,KAAKmD,SAAWJ,EAAOI,SAEvBnD,KAAKoD,SAAWL,GACPA,IACT/C,KAAKmD,SAAWE,IAAcC,MAAMP,EAAOI,UAE3CnD,KAAKoD,SAAW,IAAIF,IAAe,CACjCK,QAASlD,OAAOC,OAAO,GAAIyC,EAAOQ,SAClCJ,SAAUnD,KAAKmD,SACfK,aAAcT,EAAOS,aACrBC,eAAgBV,EAAOU,kBAI3BzD,KAAKqB,OAAS,IAAIqC,KAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACtD1D,KAAKoB,MAAQ,IAAIuC,IAEjB3D,KAAK4D,KAAO,IAAIC,IAAK,IAAIC,IAAoB,EAAG,GAAI,MACpD9D,KAAK4D,KAAKG,eAAgB,EAC1B/D,KAAKoB,MAAM4C,IAAIhE,KAAK4D,OAGtBd,EAAWvC,UAAYF,OAAOC,OAAOD,OAAOmB,OAAOzB,EAAKQ,WAAY,CAClEkB,YAAaqB,EAEbnC,OAAQ,SAASC,EAAUC,EAAaC,EAAYC,EAAWC,GACzDhB,KAAKmD,SAASnD,KAAKgD,aACrBhD,KAAKmD,SAASnD,KAAKgD,WAAWiB,MAAQnD,EAAWoD,SAGnDlE,KAAK4D,KAAKR,SAAWpD,KAAKoD,SAEtBpD,KAAKI,gBACPQ,EAAS8B,gBAAgB,MACzB9B,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,UAEjCT,EAAS8B,gBAAgB7B,GACrBb,KAAKG,OAAOS,EAAST,QACzBS,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,YC5CvC,IAAI8C,EAAa,CACbhB,SAAU,CACRiB,SAAU,CAAEH,MAAO,MACnBI,QAAS,CAAEJ,MAAO,IAGpBT,aAAc,CACZ,oBACA,gBACA,YACA,4EACA,KACAc,KAAK,MAEPb,eAAgB,CACd,yBACA,8BACA,oBACA,gBACA,2CACA,kCACA,KACAa,KAAK,OCpBPC,EAAiB,SAAS3D,EAAU4D,GAGtC,GAFAxE,KAAKY,SAAWA,OAEKqC,IAAjBuB,EAA4B,CAC9B,IAAIC,EAAa,CACfC,UAAWC,IACXC,UAAWD,IACXE,OAAQC,IACRC,eAAe,GAGbC,EAAOpE,EAASqE,qBAAqB,IAAIC,MAC7CV,EAAe,IAAIW,IAAkBH,EAAKvE,MAAOuE,EAAKtE,OAAQ+D,IACjDP,QAAQkB,KAAO,qBAG9BpF,KAAKqF,cAAgBb,EACrBxE,KAAKsF,cAAgBd,EAAalB,QAClCtD,KAAKsF,cAAcpB,QAAQkB,KAAO,qBAClCpF,KAAKa,YAAcb,KAAKqF,cACxBrF,KAAKc,WAAad,KAAKsF,cACvBtF,KAAKuF,OAAS,QAGKtC,IAAfkB,GACFlD,QAAQC,MAAM,wDAEG+B,IAAfH,GACF7B,QAAQC,MAAM,mDAEhBlB,KAAKwF,SAAW,IAAI1C,EAAWqB,GAC/BnE,KAAKyF,mBAAqBC,KAAKC,OAGjCtF,OAAOC,OAAOiE,EAAehE,UAAW,CACtCqF,YAAa,WACX,IAAIC,EAAM7F,KAAKc,WACfd,KAAKc,WAAad,KAAKa,YACvBb,KAAKa,YAAcgF,GAGrBC,QAAS,SAASC,GAChB/F,KAAKuF,OAAOS,KAAKD,GACjB,IAAIf,EAAOhF,KAAKY,SAASqE,qBAAqB,IAAIC,KAClDa,EAAKvF,QAAQwE,EAAKvE,MAAOuE,EAAKtE,SAGhCuF,WAAY,SAASF,EAAMG,GACzBlG,KAAKuF,OAAOY,OAAOD,EAAO,EAAGH,IAG/BpF,OAAQ,SAASI,QAEGkC,IAAdlC,IACFA,EAAqD,MAAxC2E,KAAKC,MAAQ3F,KAAKyF,qBAEjCzF,KAAKyF,mBAAqBC,KAAKC,MAC/B,IAEII,EACFK,EAHEC,EAAsBrG,KAAKY,SAAS0F,kBACpCtF,GAAa,EAGfuF,EAAKvG,KAAKuF,OAAOiB,OAEnB,IAAKJ,EAAI,EAAGA,EAAIG,EAAIH,IAElB,IAAqB,KADrBL,EAAO/F,KAAKuF,OAAOa,IACVnG,QAAT,CAGA,GADA8F,EAAKpF,OAAOX,KAAKY,SAAUZ,KAAKa,YAAab,KAAKc,WAAYC,EAAWC,GACrE+E,EAAK7F,UAAW,CAClB,GAAIc,EAAY,CACd,IAAIY,EAAU5B,KAAKY,SAASgB,QAC5BA,EAAQ6E,YAAY7E,EAAQ8E,SAAU,EAAG,YACzC1G,KAAKwF,SAAS7E,OAAOX,KAAKY,SAAUZ,KAAKa,YAAab,KAAKc,WAAYC,GACvEa,EAAQ6E,YAAY7E,EAAQe,MAAO,EAAG,YAExC3C,KAAK4F,mBAEU3C,IAAb9B,IACE4E,aAAgB5E,EAClBH,GAAa,EACJ+E,aAAgBlD,IACzB7B,GAAa,IAInBhB,KAAKY,SAAS8B,gBAAgB2D,IAGhCM,MAAO,SAASnC,GACd,QAAqBvB,IAAjBuB,EAA4B,CAC9B,IAAIQ,EAAOhF,KAAKY,SAASqE,qBAAqB,IAAIC,MAClDV,EAAexE,KAAKqF,cAAc/B,SACrB9C,QAAQwE,EAAKvE,MAAOuE,EAAKtE,QAExCV,KAAKqF,cAAcuB,UACnB5G,KAAKsF,cAAcsB,UACnB5G,KAAKqF,cAAgBb,EACrBxE,KAAKsF,cAAgBd,EAAalB,QAClCtD,KAAKa,YAAcb,KAAKqF,cACxBrF,KAAKc,WAAad,KAAKsF,eAEzB9E,QAAS,SAASC,EAAOC,GACvBV,KAAKqF,cAAc7E,QAAQC,EAAOC,GAClCV,KAAKsF,cAAc9E,QAAQC,EAAOC,GAClC,IAAK,IAAI0F,EAAI,EAAGA,EAAIpG,KAAKuF,OAAOiB,OAAQJ,IACtCpG,KAAKuF,OAAOa,GAAG5F,QAAQC,EAAOC,MC5GpC,IAAImG,EAAa,SAASzF,EAAOC,EAAQyF,EAAkBC,EAAYC,GACrEjH,EAAKuB,KAAKtB,MAEVA,KAAKoB,MAAQA,EACbpB,KAAKqB,OAASA,EAEdrB,KAAK8G,iBAAmBA,EAExB9G,KAAK+G,WAAaA,EAClB/G,KAAKgH,gBAA4B/D,IAAf+D,EAA2BA,EAAa,EAE1DhH,KAAKG,OAAQ,EACbH,KAAKiH,YAAa,EAClBjH,KAAKE,WAAY,GAGnB2G,EAAWtG,UAAYF,OAAOC,OAAOD,OAAOmB,OAAOzB,EAAKQ,WAAY,CAClEkB,YAAaoF,EAEblG,OAAQ,SAASC,EAAUC,EAAaC,EAAYC,EAAWC,GAC7D,IAKIkG,EAAeC,EALfC,EAAexG,EAASyG,UAC5BzG,EAASyG,WAAY,EAErBrH,KAAKoB,MAAM0F,iBAAmB9G,KAAK8G,iBAI/B9G,KAAK+G,aACPG,EAAgBtG,EAAS0G,gBAAgBC,SACzCJ,EAAgBvG,EAAS4G,gBAEzB5G,EAAS6G,cAAczH,KAAK+G,WAAY/G,KAAKgH,aAG3ChH,KAAKiH,YACPrG,EAASqG,aAGXrG,EAAS8B,gBAAgB1C,KAAKI,eAAiB,KAAOU,GAGlDd,KAAKG,OAAOS,EAAST,MAAMS,EAAS8G,eAAgB9G,EAAS+G,eAAgB/G,EAASgH,kBAC1FhH,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,QAE7BrB,KAAK+G,YACPnG,EAAS6G,cAAcP,EAAeC,GAGxCnH,KAAKoB,MAAM0F,iBAAmB,KAC9BlG,EAASyG,UAAYD,KC1CzB,IAAIS,EAAgB,CAChB1E,SAAU,CACRiB,SAAU,CAAEH,MAAO,MACnB6D,MAAO,CAAE7D,MAAO,MAChB8D,IAAK,CAAE9D,MAAO,GACd+D,OAAQ,CAAE/D,MAAO,KACjBgE,MAAO,CAAEhE,MAAO,KAChBiE,KAAM,CAAEjE,MAAO,KACfkE,OAAQ,CAAElE,MAAO,KACjBmE,OAAQ,CAAEnE,MAAO,KACjBoE,aAAc,CAAEpE,MAAO,IACvBqE,aAAc,CAAErE,MAAO,IACvBsE,MAAO,CAAEtE,MAAO,MAGlBT,aAAc,CACZ,oBACA,gBACA,YACA,4EACA,KACAc,KAAK,MAEPb,eAAgB,CACd,mBACA,8BACA,2BACA,wBACA,uBACA,sBACA,wBACA,wBACA,8BACA,8BACA,uBACA,oBACA,uBACA,oEACA,IACA,gBACA,cACA,gBACA,0CACA,0CAEA,gDACA,8DACA,iBACA,mCACA,IACA,SACA,sBACA,IACA,IACA,8DACA,iBACA,oBACA,IACA,SACA,mCACA,IACA,IACA,kCACA,kCAEA,wDACA,6CACA,qCACA,6CACA,iDAEA,0EACA,qCACA,IACA,SACA,0CACA,IACA,KACAa,KAAK,OCxELkE,EAAa,SAASC,GACxB1I,EAAKuB,KAAKtB,WACYiD,IAAlB4E,GAA6B5G,QAAQC,MAAM,kDAC/C,IAAI6B,EAAS8E,EACb7H,KAAKmD,SAAWE,IAAcC,MAAMP,EAAOI,eAC3BF,IAAZwF,IAAuBA,EAAU,IACrCzI,KAAKmD,SAAL,MAAuBc,MAAQjE,KAAK0I,kBAAkBD,GACtDzI,KAAKoD,SAAW,IAAIF,IAAe,CACjCC,SAAUnD,KAAKmD,SACfK,aAAcT,EAAOS,aACrBC,eAAgBV,EAAOU,iBAEzBzD,KAAKqB,OAAS,IAAIqC,KAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACtD1D,KAAKoB,MAAQ,IAAIuC,IACjB3D,KAAK4D,KAAO,IAAIC,IAAK,IAAIC,IAAoB,EAAG,GAAI,MACpD9D,KAAK4D,KAAKG,eAAgB,EAC1B/D,KAAKoB,MAAM4C,IAAIhE,KAAK4D,MACpB5D,KAAK2I,OAAS,GAGhBH,EAAWjI,UAAYF,OAAOC,OAAOD,OAAOmB,OAAOzB,EAAKQ,WAAY,CAClEkB,YAAa+G,EAEb7H,OAAQ,SAASC,EAAUC,EAAaC,EAAYC,EAAWC,GAC7D,IAAM2H,EAASC,KAAKC,IAAI,EAAG7I,KAAK2I,QAChC3I,KAAKmD,SAAL,SAA0Bc,MAAQnD,EAAWoD,QAC7ClE,KAAKmD,SAAL,KAAsBc,MAAQ2E,KAAKE,SAAWH,EAC9C3I,KAAKmD,SAAL,IAAqBc,MAAQ,EACzB0E,GACF3I,KAAKmD,SAAL,OAAwBc,MAAS2E,KAAKE,SAAW,GAAMH,EACvD3I,KAAKmD,SAAL,MAAuBc,MAAQ8E,IAAMC,WAAWJ,KAAKK,GAAIL,KAAKK,IAAMN,EACpE3I,KAAKmD,SAAL,aAA8Bc,MAAQ8E,IAAMC,UAAU,EAAG,GAAKL,EAC9D3I,KAAKmD,SAAL,aAA8Bc,MAAQ8E,IAAMC,UAAU,EAAG,GAAKL,EAC9D3I,KAAKmD,SAAL,OAAwBc,MAAQ8E,IAAMC,WAAW,GAAK,IAAOL,EAC7D3I,KAAKmD,SAAL,OAAwBc,MAAQ8E,IAAMC,WAAW,GAAK,IAAOL,GACxD3I,KAAKmD,SAAL,IAAqBc,MAAQ,EACpCjE,KAAK4D,KAAKR,SAAWpD,KAAKoD,SACtBpD,KAAKI,gBACPQ,EAAS8B,gBAAgB,MACzB9B,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,UAEjCT,EAAS8B,gBAAgB7B,GACrBb,KAAKG,OAAOS,EAAST,QACzBS,EAASD,OAAOX,KAAKoB,MAAOpB,KAAKqB,UAIrCqH,kBAAmB,SAASD,GAI1B,IAHA,IAAIS,EAAW,IAAIC,aAAaV,EAAUA,EAAU,GAChDjC,EAASiC,EAAUA,EAEdrC,EAAI,EAAGA,EAAII,EAAQJ,IAAK,CAC/B,IAAIgD,EAAML,IAAMC,UAAU,EAAG,GAC7BE,EAAa,EAAJ9C,EAAQ,GAAKgD,EACtBF,EAAa,EAAJ9C,EAAQ,GAAKgD,EACtBF,EAAa,EAAJ9C,EAAQ,GAAKgD,EAGxB,IAAIlF,EAAU,IAAImF,IAAYH,EAAUT,EAASA,EAASa,IAAWC,KAErE,OADArF,EAAQsF,aAAc,EACftF,KCnEbuF,YAAY,CAAElF,iBAAgBsC,aAAY2B,eAC1CkB,YAAW,CAAEnF,iBAAgBsC,aAAY2B,eAEzC,IAAMmB,EAAa,SAAC,GAAe,IAAb5H,EAAY,EAAZA,MACZ6H,EAAaC,cAAbD,SACR,OACE,0BAAME,MAAO,CAACF,EAASnJ,MAAOmJ,EAASlJ,OAAQ,IAC7C,mCAAeqJ,OAAO,WAAWC,KAAM,CAAC,EAAG,KAC3C,kBAAC,IAAEC,kBAAH,CAAqBF,OAAO,WAAWhI,MAAOA,EAAOmI,WAAW,MAKhEC,EAAO,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,SAAUC,EAAyD,EAAzDA,SAAUhG,EAA+C,EAA/CA,QAA+C,IAAtCtC,aAAsC,MAA9B,QAA8B,MAArBuI,gBAAqB,MAAV,IAAU,IAG7ET,cADFD,SAAmBW,EAF4D,EAEnE9J,MAA8B+J,EAFqC,EAE7C9J,OAE9BoJ,EAAQS,EAAgBC,EAAiBD,EAAgBC,EACzDC,EAASC,mBAAQ,WACrB,IAAMD,EAASE,SAASC,cAAc,UACtCH,EAAOhK,MAAQgK,EAAO/J,OAAS,KAC/B,IAAMkB,EAAU6I,EAAOI,WAAW,MAMlC,OALAjJ,EAAQkJ,KAAR,eAAuBR,EAAvB,2IACA1I,EAAQmJ,UAAY,SACpBnJ,EAAQoJ,aAAe,SACvBpJ,EAAQqJ,UAAYlJ,EACpBH,EAAQsJ,SAASd,EAAU,KAAM,KAC1BK,IACN,CAACL,EAAUrI,EAAOuI,IACrB,OACE,kBAAC,IAAEa,OAAH,CAAUrB,MAAO,CAACA,EAAOA,EAAO,GAAIO,SAAUA,GAC5C,kBAAC,IAAEe,eAAH,CAAkBrB,OAAO,WAAWsB,aAAW,EAAChH,QAASA,GACvD,mCAAe0F,OAAO,MAAMuB,MAAOb,EAAQc,kBAAgB,EAACC,SAAU,SAAAC,GAAC,OAAKA,EAAEjC,aAAc,QAM9FkC,EAAQ,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,IAAKtH,EAAyC,EAAzCA,QAASyF,EAAgC,EAAhCA,MAAO8B,EAAyB,EAAzBA,SAAaC,EAAY,oDACvD3H,EAAUwG,mBAAQ,kBAAM,IAAIoB,KAAsBC,KAAKJ,KAAM,CAACA,IAC9DK,EAAOC,mBAEb,OACE,kBAAC,IAAED,KAAH,eAAQE,IAAKF,GAAUH,EAAvB,CAA8B/B,MAAO,CAACA,EAAOA,EAAO,GAAIqC,QAAS,kBAAMC,OAAOC,SAAWT,KACvF,yCAAqB7B,OAAO,WAAWC,KAAM,CAAC,EAAG,KACjD,kBAAC,IAAEsC,oBAAH,CAAuBvC,OAAO,WAAWsB,aAAW,EAAChH,QAASA,GAC5D,+BAAW0F,OAAO,MAAMwC,OAAQrI,OAMlCsI,EAAUC,IAAMC,MAAK,YAAiB,IAAd/D,EAAa,EAAbA,OAAa,EACLkB,cAA5B8C,EADiC,EACjCA,GAAIvL,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,OAAQ2D,EADc,EACdA,KACrB4H,EAAWX,mBAIjB,OAHAY,qBAAU,WAAWD,EAASE,QAAQtM,QAAQwE,EAAKvE,MAAOuE,EAAKtE,UAAS,CAACsE,IAEzE+H,aAAS,kBAAMH,EAASE,QAAQnM,WAAU,GAExC,oCAAgBuL,IAAKU,EAAU5C,KAAM,CAAC2C,IACpC,gCAAYK,YAAY,SAAShD,KAAM,CAAC5I,EAAOC,KAC/C,kBAAC,IAAE4L,WAAH,CAAcD,YAAY,SAAS5M,gBAAc,EAACuI,OAAQA,QAK1DuE,EAAQ,WACZ,IAAIC,EAAQlB,mBACRmB,EAAQ,EACZL,aAAS,WACP,IAAMM,EAAI,EAAIzE,KAAK0E,IAAIxB,IAAWyB,SAAUH,GAAS,MAC/C3B,EAAI7C,KAAK4E,IAAI1B,IAAWyB,SAAiB,EAARH,IACvCD,EAAML,QAAQW,SAASC,IAAIL,EAAGA,EAAGA,GACjCF,EAAML,QAAQhD,MAAM4D,IAAIjC,EAAGA,EAAGA,MAPd,MASSf,mBAAQ,WAIjC,MAAO,CAHK,IAAIoB,IAA2B,EAAG,GAAI,IACtC,IAAIA,IAAwB,CAAE/J,MAAO,IAAI+J,IAAY,aAAcT,aAAa,IAC7E,IAAIsC,MAAM,KAAMC,OAAOC,KAAI,SAAAzH,GAAC,MAAI,CAAiB,IAAhBwC,KAAKE,SAAiB,IAAqB,IAAhBF,KAAKE,SAAiB,IAAqB,IAAhBF,KAAKE,SAAiB,WAE3H,IAde,mBASXgF,EATW,KASNC,EATM,KASDC,EATC,KAelB,OACE,kBAAC,IAAEb,MAAH,CAASjB,IAAKiB,GACXa,EAAOH,KAAI,WAAezH,GAAf,uBAAE6H,EAAF,KAAMC,EAAN,KAAUC,EAAV,YACV,0BAAMC,IAAKhI,EAAGiI,SAAUP,EAAK1K,SAAU2K,EAAK1D,SAAU,CAAC4D,EAAIC,EAAIC,UAMjExK,EAAQ,WACZ,OACE,oCACE,kBAAC,IAAE2K,UAAH,CAAaC,UAAW,IAAKxM,MAAM,QAAQsI,SAAU,CAAC,EAAG,EAAG,OAC5D,kBAACmC,EAAD,CAAS7D,OAAQ,IACjB,kBAAC,EAAD,CAAY5G,MAAO,YACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMuI,SAAU,IAAKjG,QAAS,GAA9B,gBAMA,kBAAC,EAAD,CAAOmK,UAAU,eAAe7C,IAAK,wDAAyDC,SAAU,iCAAkC9B,MAAO,GAAKzF,QAAS,EAAGgG,SAAU,EAAE,GAAK,EAAG,KACtL,kBAAC,EAAD,CAAOmE,UAAU,eAAe7C,IAAK,wDAAyDC,SAAU,uCAAwC9B,MAAO,GAAKzF,QAAS,EAAGgG,SAAU,CAAC,GAAK,EAAG,OAelLoE,EAVH,WACV,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SChHYC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASlO,OACP,kBAAC,IAAMmO,WAAP,KACE,kBAAC,EAAD,OAEFnE,SAASoE,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApO,GACLD,QAAQC,MAAMA,EAAMqO,c","file":"static/js/main.ee0cda80.chunk.js","sourcesContent":["var Pass = function() {\n    // if set to true, the pass is processed by the composer\n    this.enabled = true\n  \n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    this.needsSwap = true\n  \n    // if set to true, the pass clears its buffer before rendering\n    this.clear = false\n  \n    // if set to true, the result of the pass is rendered to screen\n    this.renderToScreen = false\n  }\n  \n  Object.assign(Pass.prototype, {\n    setSize: function(width, height) {},\n  \n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      console.error('THREE.Pass: .render() must be implemented in derived pass.')\n    },\n  })\n  \n  export { Pass }","import { Pass } from './Pass.js'\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar MaskPass = function(scene, camera) {\n  Pass.call(this)\n\n  this.scene = scene\n  this.camera = camera\n\n  this.clear = true\n  this.needsSwap = false\n\n  this.inverse = false\n}\n\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: MaskPass,\n\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    var context = renderer.context\n    var state = renderer.state\n\n    // don't update color or depth\n\n    state.buffers.color.setMask(false)\n    state.buffers.depth.setMask(false)\n\n    // lock buffers\n\n    state.buffers.color.setLocked(true)\n    state.buffers.depth.setLocked(true)\n\n    // set up stencil\n\n    var writeValue, clearValue\n\n    if (this.inverse) {\n      writeValue = 0\n      clearValue = 1\n    } else {\n      writeValue = 1\n      clearValue = 0\n    }\n\n    state.buffers.stencil.setTest(true)\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE)\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff)\n    state.buffers.stencil.setClear(clearValue)\n\n    // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer)\n    if (this.clear) renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    renderer.setRenderTarget(writeBuffer)\n    if (this.clear) renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false)\n    state.buffers.depth.setLocked(false)\n\n    // only render where stencil is set to 1\n\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff) // draw if == 1\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP)\n  },\n})\n\nvar ClearMaskPass = function() {\n  Pass.call(this)\n\n  this.needsSwap = false\n}\n\nClearMaskPass.prototype = Object.create(Pass.prototype)\n\nObject.assign(ClearMaskPass.prototype, {\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.state.buffers.stencil.setTest(false)\n  },\n})\n\nexport { ClearMaskPass, MaskPass }\n","import { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils } from 'three/src/Three'\nimport { Pass } from './Pass.js'\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar ShaderPass = function(shader, textureID) {\n  Pass.call(this)\n\n  this.textureID = textureID !== undefined ? textureID : 'tDiffuse'\n\n  if (shader instanceof ShaderMaterial) {\n    this.uniforms = shader.uniforms\n\n    this.material = shader\n  } else if (shader) {\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n\n    this.material = new ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    })\n  }\n\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n  this.scene = new Scene()\n\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\n  this.quad.frustumCulled = false // Avoid getting clipped\n  this.scene.add(this.quad)\n}\n\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: ShaderPass,\n\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture\n    }\n\n    this.quad.material = this.material\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  },\n})\n\nexport { ShaderPass }\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n    uniforms: {\n      tDiffuse: { value: null },\n      opacity: { value: 1.0 },\n    },\n  \n    vertexShader: [\n      'varying vec2 vUv;',\n      'void main() {',\n      'vUv = uv;',\n      'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n      '}',\n    ].join('\\n'),\n  \n    fragmentShader: [\n      'uniform float opacity;',\n      'uniform sampler2D tDiffuse;',\n      'varying vec2 vUv;',\n      'void main() {',\n      'vec4 texel = texture2D( tDiffuse, vUv );',\n      'gl_FragColor = opacity * texel;',\n      '}',\n    ].join('\\n'),\n  }\n  \n  export { CopyShader }\n  ","import { ClearMaskPass, MaskPass } from './MaskPass.js'\nimport { ShaderPass } from './ShaderPass.js'\nimport { CopyShader } from './shaders/CopyShader.js'\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget } from 'three/src/Three'\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar EffectComposer = function(renderer, renderTarget) {\n  this.renderer = renderer\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false,\n    }\n\n    var size = renderer.getDrawingBufferSize(new Vector2())\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters)\n    renderTarget.texture.name = 'EffectComposer.rt1'\n  }\n\n  this.renderTarget1 = renderTarget\n  this.renderTarget2 = renderTarget.clone()\n  this.renderTarget2.texture.name = 'EffectComposer.rt2'\n  this.writeBuffer = this.renderTarget1\n  this.readBuffer = this.renderTarget2\n  this.passes = []\n\n  // dependencies\n  if (CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.CopyShader')\n  }\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass')\n  }\n  this.copyPass = new ShaderPass(CopyShader)\n  this._previousFrameTime = Date.now()\n}\n\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function() {\n    var tmp = this.readBuffer\n    this.readBuffer = this.writeBuffer\n    this.writeBuffer = tmp\n  },\n\n  addPass: function(pass) {\n    this.passes.push(pass)\n    var size = this.renderer.getDrawingBufferSize(new Vector2())\n    pass.setSize(size.width, size.height)\n  },\n\n  insertPass: function(pass, index) {\n    this.passes.splice(index, 0, pass)\n  },\n\n  render: function(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = (Date.now() - this._previousFrameTime) * 0.001\n    }\n    this._previousFrameTime = Date.now()\n    var currentRenderTarget = this.renderer.getRenderTarget()\n    var maskActive = false\n    var pass,\n      i,\n      il = this.passes.length\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i]\n      if (pass.enabled === false) continue\n\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive)\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.context\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff)\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime)\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff)\n        }\n        this.swapBuffers()\n      }\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget)\n  },\n\n  reset: function(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getDrawingBufferSize(new Vector2())\n      renderTarget = this.renderTarget1.clone()\n      renderTarget.setSize(size.width, size.height)\n    }\n    this.renderTarget1.dispose()\n    this.renderTarget2.dispose()\n    this.renderTarget1 = renderTarget\n    this.renderTarget2 = renderTarget.clone()\n    this.writeBuffer = this.renderTarget1\n    this.readBuffer = this.renderTarget2\n  },\n  setSize: function(width, height) {\n    this.renderTarget1.setSize(width, height)\n    this.renderTarget2.setSize(width, height)\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(width, height)\n    }\n  },\n})\n\nexport { EffectComposer }\n","import { Pass } from './Pass.js'\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar RenderPass = function(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n  Pass.call(this)\n\n  this.scene = scene\n  this.camera = camera\n\n  this.overrideMaterial = overrideMaterial\n\n  this.clearColor = clearColor\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0\n\n  this.clear = true\n  this.clearDepth = false\n  this.needsSwap = false\n}\n\nRenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: RenderPass,\n\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    var oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    this.scene.overrideMaterial = this.overrideMaterial\n\n    var oldClearColor, oldClearAlpha\n\n    if (this.clearColor) {\n      oldClearColor = renderer.getClearColor().getHex()\n      oldClearAlpha = renderer.getClearAlpha()\n\n      renderer.setClearColor(this.clearColor, this.clearAlpha)\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth()\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer)\n\n    // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil)\n    renderer.render(this.scene, this.camera)\n\n    if (this.clearColor) {\n      renderer.setClearColor(oldClearColor, oldClearAlpha)\n    }\n\n    this.scene.overrideMaterial = null\n    renderer.autoClear = oldAutoClear\n  },\n})\n\nexport { RenderPass }\n","/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nvar DigitalGlitch = {\n    uniforms: {\n      tDiffuse: { value: null }, //diffuse texture\n      tDisp: { value: null }, //displacement texture for digital glitch squares\n      byp: { value: 0 }, //apply the glitch ?\n      amount: { value: 0.08 },\n      angle: { value: 0.02 },\n      seed: { value: 0.02 },\n      seed_x: { value: 0.02 }, //-1,1\n      seed_y: { value: 0.02 }, //-1,1\n      distortion_x: { value: 0.5 },\n      distortion_y: { value: 0.6 },\n      col_s: { value: 0.05 },\n    },\n  \n    vertexShader: [\n      'varying vec2 vUv;',\n      'void main() {',\n      'vUv = uv;',\n      'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n      '}',\n    ].join('\\n'),\n  \n    fragmentShader: [\n      'uniform int byp;', //should we apply the glitch ?\n      'uniform sampler2D tDiffuse;',\n      'uniform sampler2D tDisp;',\n      'uniform float amount;',\n      'uniform float angle;',\n      'uniform float seed;',\n      'uniform float seed_x;',\n      'uniform float seed_y;',\n      'uniform float distortion_x;',\n      'uniform float distortion_y;',\n      'uniform float col_s;',\n      'varying vec2 vUv;',\n      'float rand(vec2 co){',\n      'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\n      '}',\n      'void main() {',\n      'if(byp<1) {',\n      'vec2 p = vUv;',\n      'float xs = floor(gl_FragCoord.x / 0.5);',\n      'float ys = floor(gl_FragCoord.y / 0.5);',\n      //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n      'vec4 normal = texture2D (tDisp, p*seed*seed);',\n      'if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {',\n      'if(seed_x>0.){',\n      'p.y = 1. - (p.y + distortion_y);',\n      '}',\n      'else {',\n      'p.y = distortion_y;',\n      '}',\n      '}',\n      'if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {',\n      'if(seed_y>0.){',\n      'p.x=distortion_x;',\n      '}',\n      'else {',\n      'p.x = 1. - (p.x + distortion_x);',\n      '}',\n      '}',\n      'p.x+=normal.x*seed_x*(seed/5.);',\n      'p.y+=normal.y*seed_y*(seed/5.);',\n      //base from RGB shift shader\n      'vec2 offset = amount * vec2( cos(angle), sin(angle));',\n      'vec4 cr = texture2D(tDiffuse, p + offset);',\n      'vec4 cga = texture2D(tDiffuse, p);',\n      'vec4 cb = texture2D(tDiffuse, p - offset);',\n      'gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\n      //add noise\n      'vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.05);',\n      'gl_FragColor = gl_FragColor+ snow;',\n      '}',\n      'else {',\n      'gl_FragColor=texture2D (tDiffuse, vUv);',\n      '}',\n      '}',\n    ].join('\\n'),\n  }\n  \n  export { DigitalGlitch }\n  ","import {\n    DataTexture,\n    FloatType,\n    Math as _Math,\n    Mesh,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils,\n  } from 'three/src/Three'\n  import { DigitalGlitch } from './shaders/DigitalGlitch.js'\n  import { Pass } from './Pass.js'\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  \n  var GlitchPass = function(dt_size) {\n    Pass.call(this)\n    if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on THREE.DigitalGlitch')\n    var shader = DigitalGlitch\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n    if (dt_size === undefined) dt_size = 64\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size)\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    })\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n    this.scene = new Scene()\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\n    this.quad.frustumCulled = false // Avoid getting clipped\n    this.scene.add(this.quad)\n    this.factor = 0\n  }\n  \n  GlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: GlitchPass,\n  \n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      const factor = Math.max(0, this.factor)\n      this.uniforms['tDiffuse'].value = readBuffer.texture\n      this.uniforms['seed'].value = Math.random() * factor //default seeding\n      this.uniforms['byp'].value = 0\n      if (factor) {\n        this.uniforms['amount'].value = (Math.random() / 90) * factor\n        this.uniforms['angle'].value = _Math.randFloat(-Math.PI, Math.PI) * factor\n        this.uniforms['distortion_x'].value = _Math.randFloat(0, 1) * factor\n        this.uniforms['distortion_y'].value = _Math.randFloat(0, 1) * factor\n        this.uniforms['seed_x'].value = _Math.randFloat(-0.3, 0.3) * factor\n        this.uniforms['seed_y'].value = _Math.randFloat(-0.3, 0.3) * factor\n      } else this.uniforms['byp'].value = 1\n      this.quad.material = this.material\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null)\n        renderer.render(this.scene, this.camera)\n      } else {\n        renderer.setRenderTarget(writeBuffer)\n        if (this.clear) renderer.clear()\n        renderer.render(this.scene, this.camera)\n      }\n    },\n  \n    generateHeightmap: function(dt_size) {\n      var data_arr = new Float32Array(dt_size * dt_size * 3)\n      var length = dt_size * dt_size\n  \n      for (var i = 0; i < length; i++) {\n        var val = _Math.randFloat(0, 1)\n        data_arr[i * 3 + 0] = val\n        data_arr[i * 3 + 1] = val\n        data_arr[i * 3 + 2] = val\n      }\n  \n      var texture = new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType)\n      texture.needsUpdate = true\n      return texture\n    },\n  })\n  \n  export { GlitchPass }\n  ","import './App.css';\nimport { extend as applyThree, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport React, { useState, useCallback, useRef, useEffect, useMemo } from 'react'\nimport { apply as applySpring, useSpring, a } from 'react-spring/three'\nimport * as THREE from 'three/src/Three'\n\n// Import and register postprocessing classes as three-native-elements for both react-three-fiber & react-spring\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './lib/EffectComposer'\nimport { RenderPass } from './lib/RenderPass'\nimport { GlitchPass } from './lib/GlitchPass'\napplySpring({ EffectComposer, RenderPass, GlitchPass })\napplyThree({ EffectComposer, RenderPass, GlitchPass })\n\nconst Background = ({ color }) => {\n  const { viewport } = useThree()\n  return (\n    <mesh scale={[viewport.width, viewport.height, 1]}>\n      <planeGeometry attach=\"geometry\" args={[1, 1]} />\n      <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n    </mesh>\n  )\n}\n\nconst Text = ({ children, position, opacity, color = 'white', fontSize = 410 }) => {\n  const {\n    viewport: { width: viewportWidth, height: viewportHeight }\n  } = useThree()\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas')\n    canvas.width = canvas.height = 2048\n    const context = canvas.getContext('2d')\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n    context.textAlign = 'center'\n    context.textBaseline = 'middle'\n    context.fillStyle = color\n    context.fillText(children, 1024, 1024 - 410 / 2)\n    return canvas\n  }, [children, color, fontSize])\n  return (\n    <a.sprite scale={[scale, scale, 1]} position={position}>\n      <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n        <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n      </a.spriteMaterial>\n    </a.sprite>\n  )\n}\n\nconst Image = ({ url, opacity, scale, redirect, ...props }) => {\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n  const mesh = useRef()\n\n  return (\n    <a.mesh ref={mesh} {...props} scale={[scale, scale, 1]} onClick={() => window.location = redirect}>\n      <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n      <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n        <primitive attach=\"map\" object={texture} />\n      </a.meshLambertMaterial>\n    </a.mesh>\n  )\n}\n\nconst Effects = React.memo(({ factor }) => {\n  const { gl, scene, camera, size } = useThree()\n  const composer = useRef()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  // This takes over as the main render-loop (when 2nd arg is set to true)\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <a.glitchPass attachArray=\"passes\" renderToScreen factor={factor} />\n    </effectComposer>\n  )\n})\n\nconst Stars = () => {\n  let group = useRef()\n  let theta = 0\n  useFrame(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)))\n    const s = Math.cos(THREE.Math.degToRad(theta * 2))\n    group.current.rotation.set(r, r, r)\n    group.current.scale.set(s, s, s)\n  })\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n    const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('peachpuff'), transparent: true })\n    const coords = new Array(1000).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n    return [geo, mat, coords]\n  }, [])\n  return (\n    <a.group ref={group}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </a.group>\n  )\n}\n\nconst Scene = () => {\n  return (\n    <>\n      <a.spotLight intensity={1.2} color=\"white\" position={[0, 0, 9000]} />\n      <Effects factor={1} />\n      <Background color={'#4f4541'} />\n      <Stars />\n      <Text fontSize={200} opacity={1}>\n        attila repka\n      </Text>\n      {/* TODO: CSS placement for the social-media */}\n      {/* TODO: Mobile viewport placement */}\n      {/* TODO: Resize viewport update */}\n      <Image className=\"social-media\" url={\"https://image.flaticon.com/icons/svg/2111/2111425.svg\"} redirect={\"https://github.com/attilarepka\"} scale={0.1} opacity={1} position={[-0.5, 0, 1]} />\n      <Image className=\"social-media\" url={\"https://image.flaticon.com/icons/svg/1409/1409945.svg\"} redirect={\"https://linkedin.com/in/attila-repka\"} scale={0.1} opacity={1} position={[0.5, 0, 1]} />\n    </>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <Canvas>\n        <Scene />\n      </Canvas>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}